// Generated by view binder compiler. Do not edit!
package com.surround.bluetoothsystem.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.SeekBar;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.surround.bluetoothsystem.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemConnectedSpeakerBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final Spinner channelSpinner;

  @NonNull
  public final TextView connectionStatus;

  @NonNull
  public final Button disconnectButton;

  @NonNull
  public final TextView speakerAddress;

  @NonNull
  public final ImageView speakerIcon;

  @NonNull
  public final TextView speakerName;

  @NonNull
  public final SeekBar speakerVolumeSeekBar;

  @NonNull
  public final TextView speakerVolumeText;

  private ItemConnectedSpeakerBinding(@NonNull CardView rootView, @NonNull Spinner channelSpinner,
      @NonNull TextView connectionStatus, @NonNull Button disconnectButton,
      @NonNull TextView speakerAddress, @NonNull ImageView speakerIcon,
      @NonNull TextView speakerName, @NonNull SeekBar speakerVolumeSeekBar,
      @NonNull TextView speakerVolumeText) {
    this.rootView = rootView;
    this.channelSpinner = channelSpinner;
    this.connectionStatus = connectionStatus;
    this.disconnectButton = disconnectButton;
    this.speakerAddress = speakerAddress;
    this.speakerIcon = speakerIcon;
    this.speakerName = speakerName;
    this.speakerVolumeSeekBar = speakerVolumeSeekBar;
    this.speakerVolumeText = speakerVolumeText;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemConnectedSpeakerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemConnectedSpeakerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_connected_speaker, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemConnectedSpeakerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.channelSpinner;
      Spinner channelSpinner = ViewBindings.findChildViewById(rootView, id);
      if (channelSpinner == null) {
        break missingId;
      }

      id = R.id.connectionStatus;
      TextView connectionStatus = ViewBindings.findChildViewById(rootView, id);
      if (connectionStatus == null) {
        break missingId;
      }

      id = R.id.disconnectButton;
      Button disconnectButton = ViewBindings.findChildViewById(rootView, id);
      if (disconnectButton == null) {
        break missingId;
      }

      id = R.id.speakerAddress;
      TextView speakerAddress = ViewBindings.findChildViewById(rootView, id);
      if (speakerAddress == null) {
        break missingId;
      }

      id = R.id.speakerIcon;
      ImageView speakerIcon = ViewBindings.findChildViewById(rootView, id);
      if (speakerIcon == null) {
        break missingId;
      }

      id = R.id.speakerName;
      TextView speakerName = ViewBindings.findChildViewById(rootView, id);
      if (speakerName == null) {
        break missingId;
      }

      id = R.id.speakerVolumeSeekBar;
      SeekBar speakerVolumeSeekBar = ViewBindings.findChildViewById(rootView, id);
      if (speakerVolumeSeekBar == null) {
        break missingId;
      }

      id = R.id.speakerVolumeText;
      TextView speakerVolumeText = ViewBindings.findChildViewById(rootView, id);
      if (speakerVolumeText == null) {
        break missingId;
      }

      return new ItemConnectedSpeakerBinding((CardView) rootView, channelSpinner, connectionStatus,
          disconnectButton, speakerAddress, speakerIcon, speakerName, speakerVolumeSeekBar,
          speakerVolumeText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
