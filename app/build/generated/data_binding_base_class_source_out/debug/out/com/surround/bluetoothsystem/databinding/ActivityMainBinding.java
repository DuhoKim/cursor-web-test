// Generated by view binder compiler. Do not edit!
package com.surround.bluetoothsystem.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.SeekBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.surround.bluetoothsystem.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final RecyclerView availableDevicesRecyclerView;

  @NonNull
  public final RecyclerView connectedSpeakersRecyclerView;

  @NonNull
  public final SeekBar masterVolumeSeekBar;

  @NonNull
  public final Button scanButton;

  @NonNull
  public final ImageView statusIndicator;

  @NonNull
  public final Button stopScanButton;

  @NonNull
  public final Button stopTestSoundButton;

  @NonNull
  public final TextView systemStatusText;

  @NonNull
  public final Button testSoundButton;

  @NonNull
  public final TextView volumeValueText;

  private ActivityMainBinding(@NonNull ScrollView rootView,
      @NonNull RecyclerView availableDevicesRecyclerView,
      @NonNull RecyclerView connectedSpeakersRecyclerView, @NonNull SeekBar masterVolumeSeekBar,
      @NonNull Button scanButton, @NonNull ImageView statusIndicator,
      @NonNull Button stopScanButton, @NonNull Button stopTestSoundButton,
      @NonNull TextView systemStatusText, @NonNull Button testSoundButton,
      @NonNull TextView volumeValueText) {
    this.rootView = rootView;
    this.availableDevicesRecyclerView = availableDevicesRecyclerView;
    this.connectedSpeakersRecyclerView = connectedSpeakersRecyclerView;
    this.masterVolumeSeekBar = masterVolumeSeekBar;
    this.scanButton = scanButton;
    this.statusIndicator = statusIndicator;
    this.stopScanButton = stopScanButton;
    this.stopTestSoundButton = stopTestSoundButton;
    this.systemStatusText = systemStatusText;
    this.testSoundButton = testSoundButton;
    this.volumeValueText = volumeValueText;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.availableDevicesRecyclerView;
      RecyclerView availableDevicesRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (availableDevicesRecyclerView == null) {
        break missingId;
      }

      id = R.id.connectedSpeakersRecyclerView;
      RecyclerView connectedSpeakersRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (connectedSpeakersRecyclerView == null) {
        break missingId;
      }

      id = R.id.masterVolumeSeekBar;
      SeekBar masterVolumeSeekBar = ViewBindings.findChildViewById(rootView, id);
      if (masterVolumeSeekBar == null) {
        break missingId;
      }

      id = R.id.scanButton;
      Button scanButton = ViewBindings.findChildViewById(rootView, id);
      if (scanButton == null) {
        break missingId;
      }

      id = R.id.statusIndicator;
      ImageView statusIndicator = ViewBindings.findChildViewById(rootView, id);
      if (statusIndicator == null) {
        break missingId;
      }

      id = R.id.stopScanButton;
      Button stopScanButton = ViewBindings.findChildViewById(rootView, id);
      if (stopScanButton == null) {
        break missingId;
      }

      id = R.id.stopTestSoundButton;
      Button stopTestSoundButton = ViewBindings.findChildViewById(rootView, id);
      if (stopTestSoundButton == null) {
        break missingId;
      }

      id = R.id.systemStatusText;
      TextView systemStatusText = ViewBindings.findChildViewById(rootView, id);
      if (systemStatusText == null) {
        break missingId;
      }

      id = R.id.testSoundButton;
      Button testSoundButton = ViewBindings.findChildViewById(rootView, id);
      if (testSoundButton == null) {
        break missingId;
      }

      id = R.id.volumeValueText;
      TextView volumeValueText = ViewBindings.findChildViewById(rootView, id);
      if (volumeValueText == null) {
        break missingId;
      }

      return new ActivityMainBinding((ScrollView) rootView, availableDevicesRecyclerView,
          connectedSpeakersRecyclerView, masterVolumeSeekBar, scanButton, statusIndicator,
          stopScanButton, stopTestSoundButton, systemStatusText, testSoundButton, volumeValueText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
